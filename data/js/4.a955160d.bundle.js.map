{"version":3,"sources":["webpack:///./src/utils/utils.js","webpack:///./src/components/GithubChangeLog.js","webpack:///./src/views/PoweredBy.js"],"names":["HTMLDecode","str","DOMParser","parseFromString","body","textContent","FormatDateTime","d","date","Date","Object","prototype","toString","call","isNaN","getTime","toLocaleDateString","toLocaleTimeString","__webpack_require__","f","_go","_utils","e","__esModule","default","ghBaseUrl","ghApiBaseUrl","defaultVendor","defaultRepoName","defaultRepoBranch","GithubChangeLog","props","_classCallCheck3","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","vendorName","repoName","repoBranch","vendorUrl","repoUrl","repoUrlWithBranch","ghRepoApi","ghRepoApiCommits","state","watchers","stargazers","forks","description","updated_at","commits","_this2","axios","get","then","res","data","setState","subscribers_count","stargazers_count","pushed_at","catch","console","log","slice","map","c","i","nc","sha","substr","author","name","login","url","committer","commit","message","html_url","_react2","createElement","key","href","Fragment","style","display","marginLeft","float","marginRight","GoEye","GoStar","GoRepoForked","className","concat","_toConsumableArray3","React","Component","v","_reactTabs","p","_SiteSignatureText","_package","Deps","_ref","myDeps","deps","_keys2","dep","func","type","devDependencies","dependencies","_class","tabIndex","match","ReactGA","pageview","window","location","pathname","search","HostTitle","suffix","Tabs","selectedIndex","onSelect","TabList","Tab","GoMarkGithub","GoRepoClone","TabPanel","_GithubChangeLog2","t"],"mappings":"6IAKgBA,WAAT,SAAoBC,GAEvB,WADmBC,WACLC,gBAAgB,wBAA0BF,EACpD,aAAaG,KAAKC,eA8BVC,eAAT,SAAwBL,GAC3B,IAvBiBM,EAuBbC,EAAO,IAAIC,KAAKR,GACpB,OAxBiBM,EAwBDC,EAvB0B,kBAAtCE,OAAOC,UAAUC,SAASC,KAAKN,IAE3BO,MAAMP,EAAEQ,WAwBL,KAFAP,EAAKQ,qBAAuB,IAAMR,EAAKS,uBAzBjCV,kKChBrBW,EAAA,MAAAX,EAAAY,EACAD,EAAA,IAMAE,EAAAF,EAAA,KAEAG,EAAAH,EAAA,cAAAC,EAAAG,GAAA,OAAAA,KAAAC,WAAAD,GAAAE,QAAAF,GAEA,IAAMG,EAAY,sBACZC,EAAe,gCAEfC,EAAgB,SAChBC,EAAkB,QAClBC,EAAoB,SAELC,cACjB,SAAAA,EAAYC,MAAOC,EAAAR,SAAAS,KAAAH,GAAA,IAAAI,KAAAC,EAAAX,SAAAS,MAAAH,EAAAM,cAAAC,EAAAb,SAAAM,IAAAjB,KAAAoB,KACTF,IACNG,EAAKH,MAAQA,EAFE,IAGTO,EAAqCP,EAArCO,WAAYC,EAAyBR,EAAzBQ,SAAUC,EAAeT,EAAfS,WAIxBC,EAAYhB,GAHhBa,EAAaA,GAAcX,GAIvBe,EAAUD,EAAY,KAH1BF,EAAWA,GAAYX,GAInBe,EAAoBD,EAAU,UAHlCF,EAAaA,GAAcX,GAIvBe,EAAYlB,EAAeY,EAAa,IAAMC,EAC9CM,EAAmBD,EAAY,WAXpB,OAYfV,EAAKY,OACDR,WAAYA,EACZC,SAAUA,EACVC,WAAYA,EACZC,UAAWA,EACXC,QAASA,EACTC,kBAAmBA,EACnBC,UAAWA,EACXC,iBAAkBA,EAClBE,SAAU,EACVC,WAAY,EACZC,MAAO,EACPC,YAAa,EACbC,WAAY,GACZC,YA1BWlB,uFA8BE,IAAAmB,EAAApB,KACjBqB,UAAMC,IAAItB,KAAKa,MAAMF,WAChBY,KAAK,SAAAC,GAAO,IAEHC,EAASD,EAATC,KACNL,EAAKM,UACDZ,SAAUW,EAAKE,kBACfZ,WAAYU,EAAKG,iBACjBZ,MAAOS,EAAKT,MACZC,YAAaQ,EAAKR,YAElBC,WAAYO,EAAKI,cAEtBC,MAAM,SAAAzC,GACL0C,QAAQC,IAAI3C,KAGpBgC,UAAMC,IAAItB,KAAKa,MAAMD,kBAChBW,KAAK,SAAAC,GACF,IAAIL,EAAUK,EAAIC,KAAKQ,MAAM,EAAG,KAChCd,EAAUA,EAAQe,IAAI,SAACC,EAAGC,GACtB,IAAIC,GACAC,IAAKH,EAAEG,IAAIC,OAAO,EAAG,GACrBC,QACIC,KAAMN,EAAEK,OAAOE,MACfC,IAAKR,EAAEK,OAAOG,KAElBC,WACIH,KAAMN,EAAES,UAAUF,MAClBC,IAAKR,EAAES,UAAUD,KAErBE,QACIL,OAAQL,EAAEK,OACVI,UAAWT,EAAES,UACbE,QAASX,EAAEU,OAAOC,SAEtBH,IAAKR,EAAEQ,IACPI,SAAUZ,EAAEY,UAEhB,OAAOC,EAAAzD,QAAA0D,cAAA,MAAIC,IAAKd,GACZY,EAAAzD,QAAA0D,cAAA,KAAGE,KAAMd,EAAGU,UAAWV,EAAGC,KADvB,IACiCD,EAAGQ,OAAOC,QAD3C,WAC2DE,EAAAzD,QAAA0D,cAAA,KAAGE,KAAMd,EAAGG,OAAOG,KAAMN,EAAGG,OAAOC,SAIzGrB,EAAKM,UACDP,QAASA,MAEdW,MAAM,SAAAzC,GACL0C,QAAQC,IAAI3C,sCAKpB,OAAQ2D,EAAAzD,QAAA0D,cAACD,EAAAzD,QAAM6D,SAAP,KACJJ,EAAAzD,QAAA0D,cAAA,WACID,EAAAzD,QAAA0D,cAAA,MAAII,OAASC,QAAW,eAAgBC,WAAc,OAClDP,EAAAzD,QAAA0D,cAAA,YAAMD,EAAAzD,QAAA0D,cAAA,KAAGE,KAAMnD,KAAKa,MAAML,WAAYR,KAAKa,MAAMR,YAAjD,KADJ,IAEI2C,EAAAzD,QAAA0D,cAAA,gBAAOD,EAAAzD,QAAA0D,cAAA,KAAGE,KAAMnD,KAAKa,MAAMJ,SAAUT,KAAKa,MAAMP,YAEpD0C,EAAAzD,QAAA0D,cAAA,KAAGI,OAASC,QAAW,eAAgBE,MAAS,QAASC,YAAe,OACpET,EAAAzD,QAAA0D,cAAA,KAAGE,KAAMnD,KAAKa,MAAMJ,QAAU,aAAcuC,EAAAzD,QAAA0D,cAAC9D,EAAAuE,MAAD,MAA5C,aAAqE1D,KAAKa,MAAMC,UADpF,IAEAkC,EAAAzD,QAAA0D,cAAA,KAAGE,KAAMnD,KAAKa,MAAMJ,QAAU,eAAgBuC,EAAAzD,QAAA0D,cAAC9D,EAAAwE,OAAD,MAA9C,eAA0E3D,KAAKa,MAAME,YAFrF,IAGAiC,EAAAzD,QAAA0D,cAAA,KAAGE,KAAMnD,KAAKa,MAAMJ,QAAU,oBAAqBuC,EAAAzD,QAAA0D,cAAC9D,EAAAyE,aAAD,MAAnD,UAAgF5D,KAAKa,MAAMG,SAG/FgC,EAAAzD,QAAA0D,cAAA,OAAKY,UAAU,aACfb,EAAAzD,QAAA0D,cAAA,aAAAa,UAAAC,EAAAxE,SACSS,KAAKa,MAAMM,WAEpB6B,EAAAzD,QAAA0D,cAAA,SAAGD,EAAAzD,QAAA0D,cAAA,YAAMD,EAAAzD,QAAA0D,cAAA,8BAAN,OAAqC7D,EAAAf,gBAAe2B,KAAKa,MAAMK,qBApGzDrB,CAAwBmE,UAAMC,qBAA9BpE,iLClBrBZ,EAAA,IAAAmD,EAAA8B,EACAjF,EAAA,MAEAkF,EAAAlF,EAAA,KAKAE,EAAAF,EAAA,KAAAmF,EAAAF,EAIAjF,EAAA,MACAoF,EAAApF,EAAA,KACAqF,EAAArF,EAAA,cAAAiF,EAAA7E,GAAA,OAAAA,KAAAC,WAAAD,GAAAE,QAAAF,GAEAJ,EAAA,KAEA,IAAMsF,EAAO,SAAAC,GAAc,IAQnBC,EAMJ,OAJIA,EATS,SAAUC,GACnB,SAAOC,EAAApF,SAAYmF,GACfxC,IAAI,SAAC0C,EAAKxC,GAAN,OACAY,EAAAzD,QAAA0D,cAAA,MAAIC,IAAKd,GACLY,EAAAzD,QAAA0D,cAAA,KAAGE,KAAA,iCAAuCyB,GAASA,EAAnD,MAA2DF,EAAKE,OAKnEC,CADD,YATWL,EAAXM,KAUMC,kBAEAC,gBAEVhC,EAAAzD,QAAA0D,cAAA,aAAAa,UAAAC,EAAAxE,SAASkF,oBAIjB,SAAAQ,EAAYnF,MAAOC,EAAAR,SAAAS,KAAAiF,GAAA,IAAAhF,KAAAC,EAAAX,SAAAS,MAAAiF,EAAA9E,cAAAC,EAAAb,SAAA0F,IAAArG,KAAAoB,KACTF,IADS,OAEfG,EAAKH,MAAQA,EACbG,EAAKY,OAAUqE,SAAU,GAHVjF,2EAMViF,GAELlF,KAAK0B,UAAWwD,8CAGX,IAAA9D,EAAApB,KAGL,OAFgBA,KAAKF,MAAfqF,MACNC,UAAQC,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QACpDzC,EAAAzD,QAAA0D,cAAA,WACJD,EAAAzD,QAAA0D,cAACoB,EAAAqB,WAAUC,OAAO,eAClB3C,EAAAzD,QAAA0D,cAAA,wBACAD,EAAAzD,QAAA0D,cAACkB,EAAAyB,MAAKC,cAAe7F,KAAKa,MAAMqE,SAAUY,SAAU,SAAAZ,GAAA,OAAY9D,EAAK0E,SAASZ,KAC1ElC,EAAAzD,QAAA0D,cAACkB,EAAA4B,QAAD,KACI/C,EAAAzD,QAAA0D,cAACkB,EAAA6B,IAAD,KAAKhD,EAAAzD,QAAA0D,cAAC9D,EAAA8G,aAAD,MAAL,gBACAjD,EAAAzD,QAAA0D,cAACkB,EAAA6B,IAAD,KAAKhD,EAAAzD,QAAA0D,cAAC9D,EAAA8G,aAAD,MAAL,kBACAjD,EAAAzD,QAAA0D,cAACkB,EAAA6B,IAAD,KAAKhD,EAAAzD,QAAA0D,cAAC9D,EAAA+G,YAAD,MAAL,qBACAlD,EAAAzD,QAAA0D,cAACkB,EAAA6B,IAAD,KAAKhD,EAAAzD,QAAA0D,cAAC9D,EAAA+G,YAAD,MAAL,kBAEJlD,EAAAzD,QAAA0D,cAACkB,EAAAgC,SAAD,KACInD,EAAAzD,QAAA0D,cAACmD,EAAA7G,SAAgBc,WAAW,SAASC,SAAS,SAElD0C,EAAAzD,QAAA0D,cAACkB,EAAAgC,SAAD,KACInD,EAAAzD,QAAA0D,cAACmD,EAAA7G,SAAgBc,WAAW,SAASC,SAAS,WAElD0C,EAAAzD,QAAA0D,cAACkB,EAAAgC,SAAD,KACInD,EAAAzD,QAAA0D,cAACsB,GAAKO,KAAK,cAEf9B,EAAAzD,QAAA0D,cAACkB,EAAAgC,SAAD,KACInD,EAAAzD,QAAA0D,cAACsB,GAAKO,KAAK,gBAAAuB,EAtCV5B,CAGQT,UAAMC","file":"js/4.a955160d.bundle.js","sourcesContent":["\n/**\n * given raw html, return parsed string\n * @param {raw html} str \n */\nexport function HTMLDecode(str) {\n    const parser = new DOMParser\n    return parser.parseFromString('<!doctype html><body>' + str,\n        'text/html').body.textContent\n}\n\n\n/**\n * check if it is a valid date\n * @param {date} d \n */\nfunction IsValidDate(d) {\n    if (Object.prototype.toString.call(d) === \"[object Date]\") {\n        // it is a date\n        if (isNaN(d.getTime())) {  // d.valueOf() could also work\n            // date is not valid\n            return false\n        }\n        else {\n            // date is valid\n            return true\n        }\n    }\n    else {\n        // not a date\n        return false\n    }\n}\n\n/**\n * given date time, format as string\n * @param {datetime} str \n */\nexport function FormatDateTime(str) {\n    let date = new Date(str)\n    if (IsValidDate(date)) {\n        return date.toLocaleDateString() + \" \" + date.toLocaleTimeString()\n    } else {\n        return \"--\"\n    }\n}","import axios from 'axios'\nimport React from 'react'\n\n// import FontAwesome from 'react-fontawesome'\n\n// ref: https://github.com/gorangajic/react-icons\n// ref: https://octicons.github.com/\nimport {GoEye, GoStar, GoRepoForked} from 'react-icons/lib/go'\n\nimport { FormatDateTime } from '../utils/utils'\n\nconst ghBaseUrl = \"https://github.com/\"\nconst ghApiBaseUrl = \"https://api.github.com/repos/\"\n\nconst defaultVendor = \"yuikns\"\nconst defaultRepoName = \"argcv\"\nconst defaultRepoBranch = \"master\"\n\nexport default class GithubChangeLog extends React.Component {\n    constructor(props) {\n        super(props)\n        this.props = props\n        let { vendorName, repoName, repoBranch } = props\n        vendorName = vendorName || defaultVendor\n        repoName = repoName || defaultRepoName\n        repoBranch = repoBranch || defaultRepoBranch\n        let vendorUrl = ghBaseUrl + vendorName\n        let repoUrl = vendorUrl + \"/\" + repoName\n        let repoUrlWithBranch = repoUrl + \"/tree/\" + repoBranch\n        let ghRepoApi = ghApiBaseUrl + vendorName + \"/\" + repoName\n        let ghRepoApiCommits = ghRepoApi + \"/commits\"\n        this.state = {\n            vendorName: vendorName,\n            repoName: repoName,\n            repoBranch: repoBranch,\n            vendorUrl: vendorUrl,\n            repoUrl: repoUrl,\n            repoUrlWithBranch: repoUrlWithBranch,\n            ghRepoApi: ghRepoApi,\n            ghRepoApiCommits: ghRepoApiCommits,\n            watchers: 0,\n            stargazers: 0,\n            forks: 0,\n            description: 0,\n            updated_at: \"\",\n            commits: []\n        }\n    }\n\n    componentWillMount() {\n        axios.get(this.state.ghRepoApi)\n            .then(res => {\n                // console.log(res)\n                let { data } = res\n                this.setState({\n                    watchers: data.subscribers_count,\n                    stargazers: data.stargazers_count,\n                    forks: data.forks,\n                    description: data.description,\n                    // updated_at: data.updated_at,\n                    updated_at: data.pushed_at,\n                })\n            }).catch(e => {\n                console.log(e)\n            })\n\n        axios.get(this.state.ghRepoApiCommits)\n            .then(res => {\n                let commits = res.data.slice(0, 100)\n                commits = commits.map((c, i) => {\n                    let nc = {\n                        sha: c.sha.substr(0, 8),\n                        author: {\n                            name: c.author.login,\n                            url: c.author.url\n                        },\n                        committer: {\n                            name: c.committer.login,\n                            url: c.committer.url\n                        },\n                        commit: {\n                            author: c.author,\n                            committer: c.committer,\n                            message: c.commit.message\n                        },\n                        url: c.url,\n                        html_url: c.html_url\n                    }\n                    return <li key={i}>\n                        <a href={nc.html_url}>{nc.sha}</a> {nc.commit.message} --  by <a href={nc.author.url}>{nc.author.name}</a>\n                    </li>\n                })\n                // console.log(commits)\n                this.setState({\n                    commits: commits\n                })\n            }).catch(e => {\n                console.log(e)\n            })\n    }\n\n    render() {\n        return (<React.Fragment>\n            <div>\n                <h2 style={{ \"display\": \"inline-block\", \"marginLeft\": \"3%\" }}>\n                    <span><a href={this.state.vendorUrl}>{this.state.vendorName}</a> </span>/\n                    <span> <a href={this.state.repoUrl}>{this.state.repoName}</a></span>\n                </h2>\n                <p style={{ \"display\": \"inline-block\", \"float\": \"right\", \"marginRight\": \"5%\" }}>\n                    <a href={this.state.repoUrl + \"/watchers\"} ><GoEye />&nbsp;Watchers {this.state.watchers}</a>&nbsp;\n                <a href={this.state.repoUrl + \"/stargazers\"} ><GoStar />&nbsp;Stargazers {this.state.stargazers}</a>&nbsp;\n                <a href={this.state.repoUrl + \"/network/members\"} ><GoRepoForked />&nbsp;Forks {this.state.forks}</a>\n                </p>\n            </div>\n            <div className=\"clearfix\" />\n            <ul>\n                {[...this.state.commits]}\n            </ul>\n            <p><span><strong>updated at :</strong> {FormatDateTime(this.state.updated_at)}</span></p>\n        </React.Fragment>)\n    }\n\n}\n\n","import React from 'react'\nimport ReactGA from 'react-ga'\n\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'\n// import FontAwesome from 'react-fontawesome'\n\n// ref: https://github.com/gorangajic/react-icons\n// ref: https://octicons.github.com/\nimport {GoMarkGithub, GoRepoClone } from 'react-icons/lib/go'\n\n\n\nimport GithubChangeLog from '../components/GithubChangeLog'\nimport { Host, HostTitle } from '../components/SiteSignatureText'\nimport { dependencies, devDependencies } from '../../package.json'\n\nimport 'react-tabs/style/react-tabs.less'\n\nconst Deps = ({ type }) => {\n    const func = function (deps) {\n        return Object.keys(deps).\n            map((dep, i) =>\n                <li key={i}>\n                    <a href={`https://www.npmjs.com/package/${dep}`} >{dep} - {deps[dep]}</a>\n                </li>)\n    }\n    var myDeps = []\n    if (type == \"dev-deps\") {\n        myDeps = func(devDependencies)\n    } else {\n        myDeps = func(dependencies)\n    }\n    return (<ul>{[...myDeps]}</ul>)\n}\n\nexport default class extends React.Component {\n    constructor(props) {\n        super(props)\n        this.props = props\n        this.state = { tabIndex: 0 }\n    }\n\n    onSelect(tabIndex) {\n        // console.log(\"current index:\", tabIndex)\n        this.setState({ tabIndex })\n    }\n\n    render() {\n        let { match } = this.props\n        ReactGA.pageview(window.location.pathname + window.location.search)\n        return (<div>\n            <HostTitle suffix=\"Powered by\" />\n            <h2>Powered by</h2>\n            <Tabs selectedIndex={this.state.tabIndex} onSelect={tabIndex => this.onSelect(tabIndex)}>\n                <TabList>\n                    <Tab><GoMarkGithub /> Project Elu</Tab>\n                    <Tab><GoMarkGithub /> Project ArgCV</Tab>\n                    <Tab><GoRepoClone /> Dev-Dependencies</Tab>\n                    <Tab><GoRepoClone /> Dependencies</Tab>\n                </TabList>\n                <TabPanel>\n                    <GithubChangeLog vendorName=\"yuikns\" repoName=\"elu\" />\n                </TabPanel>\n                <TabPanel>\n                    <GithubChangeLog vendorName=\"yuikns\" repoName=\"argcv\" />\n                </TabPanel>\n                <TabPanel>\n                    <Deps type=\"dev-deps\" />\n                </TabPanel>\n                <TabPanel>\n                    <Deps type=\"deps\" />\n                </TabPanel>\n            </Tabs>\n        </div>)\n    }\n}"],"sourceRoot":""}