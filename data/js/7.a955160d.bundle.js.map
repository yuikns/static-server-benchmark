{"version":3,"sources":["webpack:///./src/utils/utils.js","webpack:///./src/styles/ThumbGrid.scss","webpack:///./src/styles/ThumbGrid.scss?751e","webpack:///./src/components/ThumbGrid.js","webpack:///./src/components/BlogPostList.js","webpack:///./src/views/News.js"],"names":["HTMLDecode","str","DOMParser","parseFromString","body","textContent","FormatDateTime","d","date","Date","Object","prototype","toString","call","isNaN","getTime","toLocaleDateString","toLocaleTimeString","exports","module","__webpack_require__","push","i","291","e","t","n","content","hmr","transform","insertInto","locals","m","__esModule","default","ThumbCard","_props","this","props","link","thumb","title","stamp","_objectWithoutProperties3","_react2","createElement","href","className","style","backgroundImage","React","Component","_ref","cards","concat","_toConsumableArray3","_keys2","map","item","_extends3","key","GetBlogPost","id","andThen","orFailed","url","postURL","console","log","axios","get","then","res","data","catch","GetBlogPage","pageURL","s","h","f","_utils","p","blogV2BaseURL","blogBaseURL","BlogPostList","_classCallCheck3","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","_initialiseProps","state","posts","_ismounted","fetchData","value","u","r","mark","post","mediaId","featured_media","mediaResURL","source_url","error","mediaSourceURL","media_source_url","_ThumbGrid2","rendered","excerpt","_callee3","blogResp","_regenerator2","wrap","_context3","prev","next","sent","slice","_this2","setState","abrupt","forEach","_ref3","_asyncToGenerator3","_callee2","_context2","requireMedia","pWithMedia","newPosts","stop","_x2","_x3","apply","arguments","a","_SiteSignatureText","match","ReactGA","pageview","window","location","pathname","search","HostTitle","suffix","_BlogPostList2"],"mappings":"6IAKgBA,WAAT,SAAoBC,GAEvB,WADmBC,WACLC,gBAAgB,wBAA0BF,EACpD,aAAaG,KAAKC,eA8BVC,eAAT,SAAwBL,GAC3B,IAvBiBM,EAuBbC,EAAO,IAAIC,KAAKR,GACpB,OAxBiBM,EAwBDC,EAvB0B,kBAAtCE,OAAOC,UAAUC,SAASC,KAAKN,IAE3BO,MAAMP,EAAEQ,WAwBL,KAFAP,EAAKQ,qBAAuB,IAAMR,EAAKS,uBAzBjCV,qBChBrBW,EAAAC,EAAAD,QAAAE,EAAA,IAAAA,MAEAC,MAAAF,EAAAG,EAAA,6HAAoJ,KAGpJJ,EAAAG,MAAAF,EAAAG,EAAA,mjDAAwkD,MAAAC,IAAA,SAAAC,EAAAC,EAAAC,GCJxkD,IAAAC,EAAAP,EAAA,KAEA,iBAAAO,QAAAR,EAAAG,EAAAK,EAAA,MAYAP,EAAA,IAAAA,CAAAO,GALeC,OAEfC,iBACAC,oBAIAH,EAAAI,SAAAZ,EAAAD,QAAAS,EAAAI,+MCjBAX,EAAA,aAAAY,EAAAR,GAAA,OAAAA,KAAAS,WAAAT,GAAAU,QAAAV,GAEAJ,EAAA,SAEMe,0MACO,IAAAC,EACqDC,KAAKC,MAAtDC,GADJH,EACCd,EADDc,EACIG,MAAMC,EADVJ,EACUI,MAAOC,EADjBL,EACiBK,MAAOd,EADxBS,EACwBT,QAASe,EADjCN,EACiCM,MAMtC,OANsCA,EADjCC,EAAAT,SAAAE,GAAA,+CAELG,EAAOA,GAAQ,IACfE,EAAQA,GAAS,GACjBd,EAAUA,GAAW,GACrBe,EAAQA,GAAS,GACjBF,EAAQA,GAASpB,EAAQ,KACjBwB,EAAAV,QAAAW,cAAA,KAAGC,KAAMP,EAAMQ,UAAU,aAC7BH,EAAAV,QAAAW,cAAA,OAAKE,UAAU,QAAQC,OAASC,gBAAA,OAA0BT,EAA1B,OAChCI,EAAAV,QAAAW,cAAA,OAAKE,UAAU,4BACXH,EAAAV,QAAAW,cAAA,UAAKJ,GACLG,EAAAV,QAAAW,cAAA,SAAIlB,GACJiB,EAAAV,QAAAW,cAAA,YAAOH,WAbjBP,CAAkBe,UAAMC,qBAoBZ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAAgBT,EAAAV,QAAAW,cAAA,OAAKE,UAAU,gBAAfO,UAAAC,EAAArB,YACzBsB,EAAAtB,SAAYmB,GAAOI,IAAI,SAACC,EAAMpC,GAAP,OAAasB,EAAAV,QAAAW,cAACV,KAADwB,EAAAzB,UAAW0B,IAAKtC,GAAO+B,EAAMK,IAAOpC,EAAGoC,oMCZpEG,YAAT,SAAqBC,EAAIC,EAASC,GACrC,IAAIC,EAAMC,EAAU,IAAMJ,EAC1BK,QAAQC,IAAI,OAAQH,GACpBI,UAAMC,IAAIL,GACLM,KAAK,SAAAC,GAAA,OAAOT,EAAQS,EAAIC,QACxBC,MAAM,SAAAlD,GACAwC,GACCA,EAASxC,QAKTmD,YAAT,SAAqBb,EAAIC,EAASC,GACrC,IAAIC,EAAMW,EAAU,IAAMd,EAC1BK,QAAQC,IAAI,OAAQH,GACpBI,UAAMC,IAAIL,GACLM,KAAK,SAAAC,GAAA,OAAOT,EAAQS,EAAIC,QACxBC,MAAM,SAAAlD,GACAwC,GACCA,EAASxC,MAhCzB,IAAAqD,EAAAC,EAAA1D,EAAA,MAAA2D,EAAAD,EACA1D,EAAA,IAEA4D,EAAA5D,EAAA,KAAA6D,EAAAH,EACA1D,EAAA,eAAA0D,EAAAtD,GAAA,OAAAA,KAAAS,WAAAT,GAAAU,QAAAV,GAEA,IACM0D,EAAgBC,uCAChBjB,EAAUgB,EAAgB,SAC1BN,EAAUM,EAAgB,SA4BXE,cACjB,SAAAA,EAAY9C,MAAO+C,EAAAnD,SAAAG,KAAA+C,GAAA,IAAAE,KAAAC,EAAArD,SAAAG,MAAA+C,EAAAI,cAAAC,EAAAvD,SAAAkD,IAAAvE,KAAAwB,KACTC,IADSoD,EAAA7E,KAAAyE,GAEf,IACM7C,EAAUH,EAAVG,MAHS,OAIf6C,EAAKK,OACDlD,MAAOA,EACPmD,UANWN,0IAaOhD,gDAWtBD,KAAKwD,cACLxD,KAAKyD,2DAINzD,KAAKwD,iBAAajC,IAAA,eAAAmC,MAAA,eAAAvE,GAAA,EAAAwE,EAAA9D,SAAA+D,EAAA/D,QAAAgE,KAAA,SAAA1E,EAyBF2E,0FACXC,EAAUD,EAAKE,eACfC,EApFKpB,8CAoFoBkB,WACF/B,UAAMC,IAAIgC,GAChC/B,KAAK,SAAAC,GAAA,OAAOA,EAAIC,KAAK8B,aACrB7B,MAAM,SAAU8B,GAEb,OADArC,QAAQC,IAAI,QAASoC,GACd,mBAJXC,SAMJN,EAAKO,iBAAmBD,oBACjBN,oGAnCU,KAmCVA,8BAIP,IAAIP,EAAQvD,KAAKsD,MAAMC,MACvB,OACIhD,EAAAV,QAAAW,cAAA,WACID,EAAAV,QAAAW,cAAA,UAAKR,KAAKsD,MAAMlD,OACdJ,KAAKsD,MAAMlD,MAAQG,EAAAV,QAAAW,cAAA,WAAQ,KAC7BD,EAAAV,QAAAW,cAAC8D,EAAAzE,SAAUmB,SAAAC,UAAAC,EAAArB,SAAW0D,EAAMnC,IAAI,SAACC,EAAMpC,GAAP,OAC5BiB,KAAMmB,EAAKnB,MAAQ,GACnBE,SAAOuC,EAAAhF,YAAW0D,EAAKjB,MAAMmE,UAC7BjF,WAASqD,EAAAhF,YAAW0D,EAAKmD,QAAQD,UACjCpE,MAAOkB,EAAKgD,iBACZhE,SAAOsC,EAAA1E,gBAAeoD,EAAKlD,oBA/E1B4E,CAAqBlC,UAAMC,wCAiC5C2C,uCAAY,SAAAgB,IAAA,IAAAC,EAAAnB,EAAA,OAAAoB,EAAA9E,QAAA+E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACa/C,UAAMC,IAAIJ,GADvB,UACJ6C,EADIG,EAAAG,KAEJzB,EAAQmB,EAAStC,KAAK6C,MAAM,EAAG,IAC/BC,EAAK1B,WAHD,CAAAqB,EAAAE,KAAA,QAIJG,EAAKC,UAAW5B,UAJZsB,EAAAE,KAAA,sBAAAF,EAAAO,OAAA,iBAQR7B,EAAM8B,QAAN,eAAAC,KAAAC,EAAA1F,SAAA8E,EAAA9E,QAAAgE,KAAc,SAAA2B,EAAOnE,EAAMpC,GAAb,OAAA0F,EAAA9E,QAAA+E,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OACVG,EAAKQ,aAAarE,GAAMa,KAAK,SAAAyD,GACpBT,EAAK1B,YACN0B,EAAKC,SAAS,SAAAL,GACV,IAAIc,EAAWd,EAAKvB,MAEpB,OADAqC,EAAS3G,GAAK0G,GAEVpC,MAAOqC,OAPb,wBAAAH,EAAAI,SAAAL,EAAAN,MAAd,gBAAAY,EAAAC,GAAA,OAAAT,EAAAU,MAAAhG,KAAAiG,YAAA,IARQ,yBAAApB,EAAAgB,SAAApB,EAAAS,iBAjCKnC,qFCrCrB,IAAAmD,EAAAjH,EAAAF,EAAA,IAAA6E,EAAA3E,EACAF,EAAA,MAAA4E,EAAA1E,EAEAF,EAAA,MAEAoH,EAAApH,EAAA,cAAAE,EAAAE,GAAA,OAAAA,KAAAS,WAAAT,GAAAU,QAAAV,GAAAC,EAAAS,QAGe,SAAAkB,GAEX,OAF0BA,EAAZqF,MACdC,UAAQC,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QACpDnG,EAAAV,QAAAW,cAAA,WACJD,EAAAV,QAAAW,cAAC2F,EAAAQ,WAAUC,OAAO,SAClBrG,EAAAV,QAAAW,cAACqG,EAAAhH,SAAaO,MAAM","file":"js/7.a955160d.bundle.js","sourcesContent":["\n/**\n * given raw html, return parsed string\n * @param {raw html} str \n */\nexport function HTMLDecode(str) {\n    const parser = new DOMParser\n    return parser.parseFromString('<!doctype html><body>' + str,\n        'text/html').body.textContent\n}\n\n\n/**\n * check if it is a valid date\n * @param {date} d \n */\nfunction IsValidDate(d) {\n    if (Object.prototype.toString.call(d) === \"[object Date]\") {\n        // it is a date\n        if (isNaN(d.getTime())) {  // d.valueOf() could also work\n            // date is not valid\n            return false\n        }\n        else {\n            // date is valid\n            return true\n        }\n    }\n    else {\n        // not a date\n        return false\n    }\n}\n\n/**\n * given date time, format as string\n * @param {datetime} str \n */\nexport function FormatDateTime(str) {\n    let date = new Date(str)\n    if (IsValidDate(date)) {\n        return date.toLocaleDateString() + \" \" + date.toLocaleTimeString()\n    } else {\n        return \"--\"\n    }\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.push([module.id, \"@import url(https://fonts.googleapis.com/css?family=Material+Icons|Roboto|Ranga|Damion|Bubblegum+Sans|UnifrakturMaguntia);\", \"\"]);\n\n// module\nexports.push([module.id, \".ThumbGrid {\\n  display: grid;\\n  grid-template-columns: 1fr;\\n  grid-template-rows: auto;\\n  grid-gap: 0.5em; }\\n  .ThumbGrid .ThumbCard {\\n    min-height: 50%;\\n    background: white;\\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\\n    display: flex;\\n    flex-direction: column;\\n    text-decoration: none;\\n    color: #444;\\n    position: relative;\\n    top: 0;\\n    transition: all .1s ease-in; }\\n    .ThumbGrid .ThumbCard:hover {\\n      top: -2px;\\n      box-shadow: 0 4px 5px rgba(0, 0, 0, 0.2); }\\n    .ThumbGrid .ThumbCard .thumb {\\n      padding-bottom: 60%;\\n      background-size: cover;\\n      background-position: center center; }\\n    .ThumbGrid .ThumbCard .content {\\n      padding: 1em;\\n      display: flex;\\n      flex: 1;\\n      justify-content: space-between;\\n      flex-direction: column; }\\n    .ThumbGrid .ThumbCard h1 {\\n      font-size: 2em;\\n      line-height: 1em;\\n      margin: 0;\\n      color: #232323; }\\n    .ThumbGrid .ThumbCard p {\\n      flex: 1;\\n      line-height: 1.4em; }\\n    .ThumbGrid .ThumbCard span {\\n      font-size: 12px;\\n      font-weight: bold;\\n      color: 1px 1px 2px #b5b5b5;\\n      text-transform: uppercase;\\n      letter-spacing: .05em;\\n      margin: 2em 0 0 0; }\\n\\n@media (min-width: 576px) {\\n  .ThumbGrid {\\n    grid-template-columns: 1fr; } }\\n\\n@media (min-width: 992px) {\\n  .ThumbGrid {\\n    grid-template-columns: 1fr 1fr; } }\\n\\n@media (min-width: 1200px) {\\n  .ThumbGrid {\\n    grid-template-columns: 1fr 1fr 1fr; } }\\n\\n@media (min-width: 1408px) {\\n  .ThumbGrid {\\n    grid-template-columns: 1fr 1fr 1fr; } }\\n\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./ThumbGrid.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./ThumbGrid.scss\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./ThumbGrid.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react'\n\nimport '../styles/ThumbGrid.scss'\n\nclass ThumbCard extends React.Component {\n    render() {\n        let { i, link, thumb, title, content, stamp, ...props } = this.props\n        link = link || \"#\"\n        title = title || \"\"\n        content = content || \"\"\n        stamp = stamp || \"\"\n        thumb = thumb || require('../images/logo.svg')\n        return (<a href={link} className=\"ThumbCard\" >\n            <div className=\"thumb\" style={{ \"backgroundImage\": `url(${thumb})` }}></div>\n            <div className=\"content DropDown-Content\">\n                <h2>{title}</h2>\n                <p>{content}</p>\n                <span>{stamp}</span>\n            </div>\n        </a>)\n    }\n}\n\n// Some Configurations are Already defined in App.scss\nconst ThumbGrid = ({ cards }) => (<div className=\"ThumbGrid\">\n    {[...Object.keys(cards).map((item, i) => <ThumbCard key={i} {...cards[item]} i={item} />)]}\n</div>)\n    \nexport default ThumbGrid \n","import axios from \"axios\"\nimport React from 'react'\n\nimport { HTMLDecode, FormatDateTime } from '../utils/utils'\nimport ThumbGrid from './ThumbGrid'\n\nconst blogBaseURL = \"https://blog.argcv.com/wp-json\"\nconst blogV2BaseURL = blogBaseURL + \"/wp/v2\"\nconst postURL = blogV2BaseURL + \"/posts\"\nconst pageURL = blogV2BaseURL + \"/pages\"\nconst mediaURL = blogV2BaseURL + \"/media/\"\n\n\nexport function GetBlogPost(id, andThen, orFailed) {\n    let url = postURL + '/' + id\n    console.log(\"url:\", url)\n    axios.get(url)\n        .then(res => andThen(res.data))\n        .catch(e => {\n            if(orFailed) {\n                orFailed(e)\n            }\n        })\n}\n\nexport function GetBlogPage(id, andThen, orFailed) {\n    let url = pageURL + '/' + id\n    console.log(\"url:\", url)\n    axios.get(url)\n        .then(res => andThen(res.data))\n        .catch(e => {\n            if(orFailed) {\n                orFailed(e)\n            }\n        })\n}\n\nexport default class BlogPostList extends React.Component {\n    constructor(props) {\n        super(props)\n        let posts = []\n        let { title } = props\n        this.state = {\n            title: title,\n            posts: posts,\n        }\n    }\n\n    componentWillMount() {\n    }\n    \n    componentWillReceiveProps(props) {\n        // let posts = []\n        // let { title } = props\n        // this.setState({\n        //     title: title,\n        //     posts: posts,\n        // })\n        // this.fetchData()\n    }\n    \n    componentDidMount() {\n        this._ismounted = true\n        this.fetchData() // ?\n    }\n\n    componentWillUnmount() {\n       this._ismounted = false\n    }\n\n    fetchData = async () => {\n        let blogResp = await axios.get(postURL)\n        let posts = blogResp.data.slice(0, 9)\n        if (this._ismounted) {\n            this.setState({ posts }) // ??\n        } else {\n            return\n        }\n        posts.forEach(async (item, i) => {\n            this.requireMedia(item).then(pWithMedia =>\n                {if (this._ismounted) {\n                    this.setState(prev => {\n                        let newPosts = prev.posts\n                        newPosts[i] = pWithMedia\n                        return {\n                            posts: newPosts\n                        }\n                    })\n                }})\n        })\n    }\n\n    async requireMedia(post) {\n        let mediaId = post.featured_media\n        let mediaResURL = mediaURL + mediaId\n        let mediaSourceURL = await axios.get(mediaResURL)\n            .then(res => res.data.source_url)\n            .catch(function (error) {\n                console.log(\"error\", error)\n                return \"\"\n            })\n        post.media_source_url = mediaSourceURL\n        return post\n    }\n\n    render() {\n        let posts = this.state.posts\n        return (\n            <div>\n                <h1>{this.state.title}</h1>\n                { this.state.title ? <hr/> : null}\n                <ThumbGrid cards={[...posts.map((item, i) => ({\n                    link: item.link || \"\",\n                    title: HTMLDecode(item.title.rendered),\n                    content: HTMLDecode(item.excerpt.rendered),\n                    thumb: item.media_source_url,\n                    stamp: FormatDateTime(item.date)\n                }))]} />\n            </div>\n        )\n    }\n}","import React from 'react'\nimport ReactGA from 'react-ga'\n\nimport BlogPostList from '../components/BlogPostList'\n\nimport { HostTitle } from '../components/SiteSignatureText'\n\n\nexport default ({ match }) => {\n    ReactGA.pageview(window.location.pathname + window.location.search)\n    return (<div>\n        <HostTitle suffix=\"News\" />\n        <BlogPostList title=\"Recent Blogs\" />\n    </div>)\n}"],"sourceRoot":""}